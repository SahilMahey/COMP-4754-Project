{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Harsimran/movie_rec/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\n//import { Container, Grid, Card, CardContent, CardActions, CardHeader, Box, Button, Typography } from \"@mui/material\";\nimport { Container, Grid, Card, CardContent, CardActions, CardHeader, Box, Button, Typography } from \"@mui/material\";\nimport { Link } from \"next/link\";\n\nexport default function HomePage({ type = \"Movie\" }) {\n    const [top250, setTop250] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const genres = [\"Comedy\", \"Romance\", \"Fantasy\", \"Music\", \"Animation\", \"Documentary\", \"Horror\", \"Sport\", \"Drama\"];\n    const years = [2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015];\n    const typeMap = {\n        Movie: \"Movies\",\n        Short: \"Shorts\",\n        TVSeries: \"TV Series\",\n    };\n    const imgGenre = type === \"Movie\" ? \"\" : type === \"Short\" ? \"s\" : \"t\";\n    const typeRef = useRef(type);\n\n    useEffect(() => {\n        // Simulate fetching data\n        setLoading(true);\n        setTimeout(() => {\n            setTop250([\n                { titleId: \"1\", primaryTitle: \"Inception\", averageRating: 8.8 },\n                { titleId: \"2\", primaryTitle: \"The Dark Knight\", averageRating: 9.0 },\n            ]);\n            setLoading(false);\n        }, 2000);\n    }, [type]);\n\n    return (\n        <Container component=\"main\" sx={{ py: 4 }}>\n            {/* Top 250 Section */}\n            <Typography variant=\"h4\" gutterBottom>\n                Top 250 {typeMap[type]}\n            </Typography>\n            <Grid container spacing={4}>\n                <Grid item xs={12} sm={6} md={4}>\n                    <Card\n                        sx={{\n                            backgroundImage: `linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)), url(/${imgGenre}1.png)`,\n                            backgroundSize: \"cover\",\n                            color: \"white\",\n                            height: \"100%\",\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                        }}\n                    >\n                        <CardHeader\n                            title={`Top 250 ${typeMap[type]}`}\n                            titleTypographyProps={{ variant: \"h5\", align: \"center\" }}\n                        />\n                        <CardContent sx={{ flexGrow: 1 }}>\n                            {loading && (\n                                <Typography align=\"center\" variant=\"subtitle1\">\n                                    Loading...\n                                </Typography>\n                            )}\n                            {error && (\n                                <Typography align=\"center\" variant=\"subtitle1\">\n                                    Error: {error.message}\n                                </Typography>\n                            )}\n                            {!loading && !error && (\n                                <ol>\n                                    {top250.slice(0, 5).map((movie) => (\n                                        <Typography component=\"li\" key={movie.titleId} variant=\"subtitle1\">\n                                            <Link href={`/production_info/${movie.titleId}`} style={{ color: \"white\", textDecoration: \"none\" }}>\n                                                {movie.primaryTitle}: {movie.averageRating}\n                                            </Link>\n                                        </Typography>\n                                    ))}\n                                </ol>\n                            )}\n                        </CardContent>\n                        <CardActions>\n                            <Button fullWidth>\n                                <Link href=\"/TopInfoPage\" style={{ color: \"white\", textDecoration: \"none\" }}>\n                                    Show More\n                                </Link>\n                            </Button>\n                        </CardActions>\n                    </Card>\n                </Grid>\n            </Grid>\n\n            {/* Top 20 by Genre */}\n            <Typography variant=\"h5\" gutterBottom sx={{ mt: 4 }}>\n                Top 20 for Each Genre\n            </Typography>\n            <Grid container spacing={4}>\n                {genres.map((genre, index) => (\n                    <Grid item xs={12} sm={6} md={4} key={index}>\n                        <Card>\n                            <CardHeader\n                                title={genre}\n                                titleTypographyProps={{ variant: \"h6\", align: \"center\" }}\n                            />\n                            <CardContent>\n                                <Typography align=\"center\">Top movies in {genre}</Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                ))}\n            </Grid>\n\n            {/* Top 20 by Year */}\n            <Typography variant=\"h5\" gutterBottom sx={{ mt: 4 }}>\n                Top 20 for Each Year\n            </Typography>\n            <Grid container spacing={4}>\n                {years.map((year, index) => (\n                    <Grid item xs={12} sm={6} md={4} key={index}>\n                        <Card>\n                            <CardHeader\n                                title={year}\n                                titleTypographyProps={{ variant: \"h6\", align: \"center\" }}\n                            />\n                            <CardContent>\n                                <Typography align=\"center\">Top movies from {year}</Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                ))}\n            </Grid>\n        </Container>\n    );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}